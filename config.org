#+TITLE: Francis Murillo's Emacs configuration
#+OPTIONS: toc:4 h:4

* Introduction
** If I Forget
   No words can describe my awe with Emacs and continue to do so. A text editor with a lisp interpreter, it's concept is so simple and sublime. What joy.

   I remember starting Emacs seriously at around August of 2015. Before then, I picked it up lightly and thought(not use) about it; but what really drove me to use it is.
   - Growth :: I was using an IDE before and somebody told me that GUIs change but the shell remains the same. I found myself over time exploring keyboard shortcuts, better terminals and Emacs(or maybe vi).
   - Lightweight :: I had a crappy laptop that always needed to be plugged, had a lot dead pixels, and closes when it overheats; I needed something that would work with what I had.
   - Linux :: Moving from Windows to Linux forced me to reevaluate the software I used. Adopting a new philosophy and OS pushed me in the right direction

   Whatever the reason might have been. I just want to say I'm a happy Emacs user and I find comfort and joy in hearing other people talk and share about it.
** About My Configuration
   I use org-babel as my configuration file once I heard you can do so. Splitting the configuration to multiple files was the plan but the way it weaves nicely to documentation immediately drew me in.

   You can load this with =(org-babel-load-file "/path/to/file")= if you need to reload any changes.

   This is my =init.el= to allow org-babel to read from it. My only problem is having the static org-mode in the elisp folder, you have to copy the elisp folder as well to make the configuration work as is.

   #+BEGIN_SRC emacs-lisp :tangle no
   ; This sets up the load path so that we can override it
   (package-initialize nil)

   ;; Override the packages with the git version of Org and other packages

   ;; Static org-mode
   (add-to-list 'load-path 
   (expand-file-name "elisp/org-mode/lisp" user-emacs-directory)) 
   (add-to-list 'load-path 
   (expand-file-name "elisp/org-mode/contrib/lisp" user-emacs-directory))

   ;; Load the rest of the packages
   (package-initialize nil)

   ;; FIXME: Can loading org not be hard coded?
   (load-library "org")

   (setq package-enable-at-startup nil)
   (org-babel-load-file 
   (expand-file-name "config.org" user-emacs-directory))
   #+END_SRC

   Or with an function instead
   #+BEGIN_SRC emacs-lisp
   (defun reload-config ()
   (interactive) 
   (org-babel-load-file
   (expand-file-name "config.org" user-emacs-directory)))
   #+END_SRC

* Configuration
** Personal Options
   Just some things that relate to me

   #+BEGIN_SRC emacs-lisp
   (setq
   user-full-name "Francis Murillo"
   user-mail-address "francisavmurillo@gmail.com")
   #+END_SRC

   And load some secret configuration

   #+BEGIN_SRC emacs-lisp
   (load "secret" t)
   #+END_SRC

** Package Sources
   Add package sources

   #+BEGIN_SRC emacs-lisp
   (unless (assoc-default "melpa" package-archives)

   (add-to-list 'package-archives
   '("gnu" . "http://elpa.gnu.org/packages/"))
   (add-to-list 'package-archives
   '("org" . "http://orgmode.org/elpa/"))   
   (add-to-list 'package-archives
   '("melpa" . "https://melpa.org/packages/"))
   (add-to-list 'package-archives
   '("melpa-stable" . "https://stable.melpa.org/packages/"))

   (package-refresh-contents))
   #+END_SRC

** Prepare Bootstrap
   Initialize everything needed to configure the rest. In particular I need =use-package= and =auto-compile= to bootstrap everything else.

   #+BEGIN_SRC emacs-lisp
   ;; Install and configure use-package
   (unless 
   (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

   (setq use-package-verbose t)

   ;; Install and configure auto-compile
   (use-package auto-compile
   :ensure t
   :config 
   (auto-compile-on-load-mode)
   (auto-compile-on-save-mode))

   (setq load-prefer-newer t)
   #+END_SRC
** General Configuration
*** Backups
    Backups are good, just annoying when things are good

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . (expand-file-name "backups" user-emacs-directory))))
   #+END_SRC
   
   Version control is good, like wise.

   #+BEGIN_SRC emacs-lisp
   (setq delete-old-versions -1) ;; Keep backups
   (setq version-conrol t)
   (setq vc-make-backup-files t)
   (setq auto-save-file-name-transforms '((".*" (expand-file-name "auto-save-list") t)))
   #+END_SRC
*** History
    Save minibuffer history

    #+BEGIN_SRC emacs-lisp
    (savehist-mode 1)
    
    (setq savehist-file "~/.emacs.d/savehist")
    (setq history-length t)
    (setq history-delete-duplicates t)
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
    '(kill-ring
    search-ring
    regexp-search-ring))
    #+END_SRC

* Reference
  - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]: I took her configuration as a base to make this org configuration
