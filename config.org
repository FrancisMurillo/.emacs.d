#+TITLE: Francis Murillo's Emacs configuration
#+AUTHOR: Francis Murillo
#+OPTIONS: toc:4 h:4
* Introduction
** If I Forget
   No words can describe my awe with Emacs and continue to do so. A text editor with a lisp interpreter, it's concept is so simple and sublime. What joy.

   I remember starting Emacs seriously at around August of 2015. Before then, I picked it up lightly and thought(not use) about it; but what really drove me to use it is.
   - Growth :: I was using an IDE before and somebody told me that GUIs change but the shell remains the same. I found myself over time exploring keyboard shortcuts, better terminals and Emacs(or maybe vi).
   - Lightweight :: I had a crappy laptop that always needed to be plugged, had a lot dead pixels, and closes when it overheats; I needed something that would work with what I had.
   - Linux :: Moving from Windows to Linux forced me to reevaluate the software I used. Adopting a new philosophy and OS pushed me in the right direction

   Whatever the reason might have been. I just want to say I'm a happy Emacs user and I find comfort and joy in hearing other people talk and share about it.
** About My Configuration
   I use org-babel as my configuration file once I heard you can do so. Splitting the configuration to multiple files was the plan but the way it weaves nicely to documentation immediately drew me in.

   You can load this with =(org-babel-load-file "/path/to/file")= if you need to reload any changes.

   This is my =init.el= to allow org-babel to read from it. My only problem is having the static org-mode in the elisp folder, you have to copy the elisp folder as well to make the configuration work as is.

   #+BEGIN_SRC emacs-lisp :tangle no
     (unless (>= emacs-major-version 24)
       (message "This config works only for Emacs version 24 and higher")
       (kill-emacs))

     ;; Helper functions
     (defun string/ends-with (s ending)
       "Return non-nil if string S ends with ENDING."
       (cond ((>= (length s) (length ending))
              (let ((elength (length ending)))
                (string= (substring s (- 0 elength)) ending)))
             (t nil)))

     (require 'cl)
     (setq load-path
           (remove-if
            (lambda (text) (string/ends-with text "org"))
            load-path))

     ;; customize loading the packages
     (package-initialize t)

     ;; Modify the hard dependencies
     ;; org-mode used to be here

     ;; Load the rest of the packages
     (package-initialize nil)

     ;; Configuration bootstrapping
     ;; use-package is fundamental to this configuration
     (unless (package-installed-p 'use-package)
       (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
       (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
       (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

       (package-refresh-contents)
       (package-install 'use-package)
       (require 'use-package)

       (use-package org
         :ensure t)
       (use-package org-plus-contrib
         :ensure t)

       ;; Weird dependency
       (use-package dash
         :ensure t)
       (kill-emacs))

     ;; This part assumes ony org-babel-load-file is available
     (setq package-enable-at-startup nil)
     (org-babel-load-file
      (expand-file-name "config.org" user-emacs-directory))
   #+END_SRC

   Or with an function instead

   #+BEGIN_SRC emacs-lisp
     (defun fn/reload-config ()
     (interactive)
     (org-babel-load-file
      (expand-file-name "config.org" user-emacs-directory)))
   #+END_SRC

   Also the code formatting needs to be uniform within the code blocks

   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

* Configuration
** Personal Options
   Just some things that relate to me

   #+BEGIN_SRC emacs-lisp
     (setq
      user-full-name "Francis Murillo"
      user-mail-address "francisavmurillo@gmail.com")
   #+END_SRC

   And load some secret configuration

   #+BEGIN_SRC emacs-lisp
     (load "secret" t)
   #+END_SRC
** Installation Option
   Any configuration option I use to build Emacs

   #+BEGIN_SRC sh
     ls -al
   #+END_SRC

** Package Sources
   Add package sources if not present and reload, this should have been added in the =init.el= but checked here again for completion.

   #+BEGIN_SRC emacs-lisp
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
       (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
       (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
       (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/")))
   #+END_SRC

** Prepare Bootstrap
   Initialize everything needed to configure the rest. The two major packages =use-package= and =org= have been loaded in the =init.el= file; here are the extra bootstrapping option

   #+BEGIN_SRC emacs-lisp
     (require 'use-package)
     (setq use-package-verbose t)
   #+END_SRC

** General Configuration
*** Startup
    Startup options to stop annoying you

    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-screen t)
      (setq initial-scratch-message nil)
    #+END_SRC

*** Environment
    Some environment configuration.

    #+BEGIN_SRC emacs-lisp
      (set-language-environment "UTF-8")
      (setq visible-bell t)

      (windmove-default-keybindings) ;; Fix for org-mode
      (setq org-replace-disputed-keys t)
      (setq org-support-shift-select t)
    #+END_SRC

    How about changing some options

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Backups
    Backups are good, just annoying when things are good

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC

   Version control is good, like wise.

   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions -1)
     (setq version-conrol t)
     (setq backup-by-copying t)
     (setq vc-make-backup-files t)
     ;; FIXME: Hard coded path?
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+END_SRC

*** History
    Save minibuffer history

    #+BEGIN_SRC emacs-lisp
      (savehist-mode 1)

      (setq savehist-file (expand-file-name "savehist" user-emacs-directory))
      (setq history-length t)
      (setq history-delete-duplicates t)
      (setq savehist-save-minibuffer-history 1)
      (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
    #+END_SRC

*** Variables
    Some preset variables

    #+BEGIN_SRC emacs-lisp
      (setq enable-local-variables :safe)
      (setq safe-local-variable-values
            '((auto-save-default) (backup-inhibited . t) (epa-file-encrypt-to)))
    #+END_SRC
*** Window
    Window/Frame configuration. I prefer no clutter in my screen so I disable majority of the niceties.

    #+BEGIN_SRC emacs-lisp
      (tooltip-mode -1)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (fringe-mode 0)
    #+END_SRC
*** Buffer
    Some buffer configurations

    #+BEGIN_SRC emacs-lisp
      (let ((display-table (or standard-display-table (make-display-table))))
        (set-display-table-slot display-table
                                'vertical-border (make-glyph-code ?┃))
        (setq standard-display-table display-table))
    #+END_SRC

*** Font
    I like fixed font specially DejaVu Mono

    #+BEGIN_SRC emacs-lisp
      (set-frame-font "DejaVu Sans Mono-8" t t)
    #+END_SRC

*** Theme
    Emacs theme for me. I prefer the default tsdh-dark since it's default doesn't ask too much.

    If there is no window system or in a terminal,
    #+BEGIN_SRC emacs-lisp
      (unless (window-system) (load-theme 'tsdh-light))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (when (window-system) (load-theme 'tsdh-dark))
    #+END_SRC

*** Programming
    Some programming configuration that make sense

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "RET") 'newline-and-indent)

      (setq-default indent-tabs-mode nil)
      (add-hook 'before-save-hook 'delete-trailing-whitespace)

      (setq search-whitespace-regexp ".*?")

      (mouse-avoidance-mode 'cat-and-mouse)
      (temp-buffer-resize-mode 1)

      (setq auto-save-timeout 15
            require-final-newline t
            search-highlight t
            compilation-window-height 10
            compilation-scroll-output      'first-error
            compilation-ask-about-save nil)
    #+END_SRC

*** Commands
    Unlock some commands I need

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil)
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC

** Builtin Modes
*** ido
    #+Begin_SRC emacs-lisp
      (use-package ido
        :disabled t
        :defer t
        :ensure t
        :config
        (ido-mode t)
        (ido-everywhere t)
        (setq ido-enable-flex-matching 1)
        (setq ido-show-dot-for-dired 1)

        ;; vertical ido display is better, like my taskbar
        (use-package ido-vertical-mode
          :ensure t
          :defer t
          :config
          (ido-vertical-mode t)
          (setq ido-vertical-show-count t))

        ;; flex matching is a must
        (use-package flx-ido
          :ensure t
          :defer t
          :config
          (flx-ido-mode t)
          (setq ido-enable-flex-matching t)
          (setq ido-use-faces nil))

        ;; smex is a great addition as well
        (use-package smex
          :ensure t
          :defer t
          :bind (("M-x" . smex)
                 ("C-c C-c M-x" . execute-extended-command))
          :config
          (smex-initialize)))
    #+END_SRC

    =ido= has been kind to me since I started learning Emacs but learning =helm= might be better in the long term

*** async
    #+BEGIN_SRC emacs-lisp
      (use-package async
        :ensure t)
    #+END_SRC

    Not really builtin but should be

*** dired
    Directory management for Emacs

    #+BEGIN_SRC emacs-lisp
      (use-package dired
        :config
        (setq dired-recursive-copies 'always)
        (setq dired-recursive-deletes 'always)
        (require 'dired-x) ;; Allows multi open marked files
        (setq dired-dwim-target t)
        (dired-async-mode t))
    #+END_SRC

*** winner
    You got to have those window configuration

    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :ensure t
        :config
        (winner-mode t))
    #+END_SRC

*** epa
    Encryption is a must

    Credits to [[http://conornash.com/2014/03/transparently-encrypt-org-files-in-emacs/][Conor Nash]] for this

    #+BEGIN_SRC emacs-lisp
      (require 'epa-file)
      (epa-file-enable)

      (defun fn/backup-each-save-filter (filename)
        (let ((ignored-filenames
               '("\\.gpg$"))
              (matched-ignored-filename nil))
          (mapc
           (lambda (x)
             (when (string-match x filename)
               (setq matched-ignored-filename t)))
           ignored-filenames)
          (not matched-ignored-filename)))

      (setq backup-each-save-filter-function 'fn/backup-each-save-filter)
    #+END_SRC
*** font-lock
    Syntax highlighting deserves it's own space

    #+BEGIN_SRC emacs-lisp
      (global-font-lock-mode t)

      (setq font-lock-support-mode 'jit-lock-mode)
      (setq font-lock-maximum-decoration t)

      (add-hook 'text-mode-hook 'turn-on-auto-fill)
      (setq-default fill-column 72)
    #+END_SRC

*** show-paren
    Also a vital thing to keeping things highlighted

    #+BEGIN_SRC emacs-lisp
      (show-paren-mode t)

      (setq show-paren-style 'expression)
    #+END_SRC
*** hippie-exp
    Hippie expand rocks

    #+BEGIN_SRC emacs-lisp
      (use-package hippie-exp
        :config
        (global-set-key (kbd "M-/") 'hippie-expand)
        (setq hippie-expand-try-functions-list
              '(
                try-expand-dabbrev
                try-expand-dabbrev-all-buffers
                try-complete-file-name-partially
                try-complete-file-name
                try-expand-all-abbrevs
                try-expand-list
                try-expand-line
                try-complete-lisp-symbol-partially
                try-complete-lisp-symbol)))
    #+END_SRC

*** paredit
    A must for Lisp editing

    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :ensure t
        :defer t)
    #+END_SRC

*** recentf
    Accessing the files recently

    #+BEGIN_SRC emacs-lisp
      (use-package recentf
        :defer t
        :config
        (recentf-mode 1)
        (setq recentf-max-menu-items 50)
        (global-set-key "\C-x\ \C-r" 'recentf-open-files)
        (setq recentf-exclude '("TAGS" ".*-autoloads\\.el\\'")))
    #+END_SRC

*** whitespace
    Got to love that whitespace display

    #+BEGIN_SRC emacs-lisp
      (use-package whitespace-mode
        :diminish whitespace-mode
        :init
        (global-whitespace-mode t))
    #+END_SRC

*** visual-line
    Visual lines make more sense than the hard lines, what you see is
    what you get. Besides, I use syntax motions

    #+BEGIN_SRC emacs-lisp
      (use-package visual-line
        :diminish visual-line-mode
        :init
        (global-visual-line-mode t))
    #+END_SRC

*** hl-line
    Highlight the current line

    #+BEGIN_SRC emacs-lisp
      (use-package hl-line
        :diminish hl-line-mode
        :init
        (global-hl-line-mode t))
    #+END_SRC
*** auto-revert
    The more generic revert

    #+BEGIN_SRC emacs-lisp
      (use-package auto-revert
        :diminish auto-revert-mode
        :init
        (global-auto-revert-mode t)
        (setq global-auto-revert-non-file-buffers t
              auto-revert-verbose nil))
    #+END_SRC

*** autorevert
    Enhancement for log reading

    #+BEGIN_SRC emacs-lisp
      (use-package autorevert
        :diminish auto-revert-mode
        :mode (("\\.log\\'" . auto-revert-tail-mode)));
    #+END_SRC

*** prettify-symbols
    Make things more algebraic

    #+BEGIN_SRC emacs-lisp
      (use-package prettify-symbols-mode
        :if (version<= "24.4.4" emacs-version)
        :init
        (add-hook 'js2-mode-hook
                  (lambda ()
                    (push '("function" . ?λ) prettify-symbols-alist)
                    (push '("arguments" . ?ω) prettify-symbols-alist)
                    (push '("var" . ?ν) prettify-symbols-alist)
                    (push '("return" . ?ρ) prettify-symbols-alist)
                    (push '("this" . ?ι) prettify-symbols-alist)

                    (push '("for" . ?∫) prettify-symbols-alist)
                    (push '("in" . ?⊂ ) prettify-symbols-alist)

                    (push '("Object" . ?Θ) prettify-symbols-alist)

                    (push '("if" . ?α) prettify-symbols-alist)
                    (push '("else if" . ?β) prettify-symbols-alist)
                    (push '("else" . ?γ) prettify-symbols-alist)

                    (push '("->" . ?→) prettify-symbols-alist)
                    (push '("&&" . ?∧) prettify-symbols-alist)
                    (push '("||" . ?∨) prettify-symbols-alist)

                    (push '("!" . ?¬) prettify-symbols-alist)
                    (push '("!!" . ?⌐) prettify-symbols-alist)

                    (push '("=" . ?⟵) prettify-symbols-alist)
                    (push '(":" . ?⟵) prettify-symbols-alist)

                    (push '("===" . ?≡) prettify-symbols-alist)
                    (push '("!==" . ?≢) prettify-symbols-alist)

                    (push '(">=" . ?≧) prettify-symbols-alist)
                    (push '("<=" . ?≦) prettify-symbols-alist)

                    (push '("true" . ?⊤) prettify-symbols-alist)
                    (push '("false" . ?⊥) prettify-symbols-alist)

                    (push '("null" . ?∅) prettify-symbols-alist)
                    (push '("undefined" . ?↑) prettify-symbols-alist)

                    (push '(", ". ?⟼) prettify-symbols-alist)
                    (push '("{". ?⟹) prettify-symbols-alist)
                    (push '("},". ?⟺) prettify-symbols-alist)
                    (push '("}". ?⟸) prettify-symbols-alist)
                    (push '("};". ?⟽) prettify-symbols-alist)

                    (push '("(". ?⟖) prettify-symbols-alist)
                          (push '(")". ?⟕) prettify-symbols-alist)
                    (push '(");". ?⟕) prettify-symbols-alist)
                  (push '("),". ?⟗) prettify-symbols-alist)

                  (push '("[". ?⊏) prettify-symbols-alist)
              (push '("]". ?⊐) prettify-symbols-alist)
        (push '("],". ?⊡P) prettify-symbols-alist)
      (push '("];". ?⊐) prettify-symbols-alist)

      (push '(";". ?⟐) prettify-symbols-alist)


      (prettify-symbols-mode 1)))
      (add-hook 'haskell-mode-hook
                (lambda ()
                  (push '("->" . ?→) prettify-symbols-alist)
                  (push '("let" . ?ν) prettify-symbols-alist)
                  (push '("if" . ?α) prettify-symbols-alist)
                  (push '("in" . ?ε) prettify-symbols-alist)
                  (push '("then" . ?σ) prettify-symbols-alist)
                  (push '("else" . ?τ) prettify-symbols-alist)
                  (push '("where" . ?δ) prettify-symbols-alist)
                  (push '("module" . ?θ) prettify-symbols-alist)
                  (push '("data" . ?Τ) prettify-symbols-alist)
                  (push '("deriving" . ?Δ) prettify-symbols-alist)
                  (prettify-symbols-mode 1))))
    #+END_SRC

** Basic Modes
*** guru
    Want to make sure I never hit those evil keys

    #+BEGIN_SRC emacs-lisp
      (use-package guru-mode
        :ensure t
        :diminish guru-mode
        :config
        (guru-global-mode t))
    #+END_SRC
*** nyan
    Love them kitty down there. Also this keeps things in perspective to have fun.

    #+BEGIN_SRC emacs-lisp
      (use-package nyan-mode
        :ensure t
        :config
        (nyan-mode t))
    #+END_SRC

*** fireplace
    Warm and cozy feeling

    #+BEGIN_SRC emacs-lisp
      (use-package fireplace
        :ensure t)
    #+END_SRC

*** zone
    I love to zone out from time to time.

    #+BEGIN_SRC emacs-lisp
      (use-package zone
        :ensure t
        :config
        (zone-when-idle 60)
        (setq zone-programs (list))

        (setq
         zone-animation-directory (expand-file-name "elisp/custom-zone" user-emacs-directory)
         end-of-buffer-animation (expand-file-name "end-of-buffer.el" zone-animation-directory)
         waves-animation (expand-file-name "waves.el" zone-animation-directory)
         )

        (load-file end-of-buffer-animation)
        (load-file waves-animation)

        (add-to-list 'zone-programs 'zone-end-of-buffer)
        (add-to-list 'zone-programs 'zone-waves))

      (use-package zone-nyan
        :ensure t
        :after zone
        :config
        (add-to-list 'zone-programs 'zone-nyan))

      (use-package zone-rainbow
        :ensure t
        :after zone
        :config
        (add-to-list 'zone-programs 'zone-rainbow))

      (use-package zone-sl
        :ensure t
        :after zone
        :config
        (add-to-list 'zone-programs 'zone-sl))
    #+END_SRC

*** exec-path-from-shell
    Command line integration

    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :ensure t
        :config
        (exec-path-from-shell-initialize))
    #+END_SRC

*** term
    An enhancement for =term=

    #+BEGIN_SRC emacs-lisp
      (use-package term
        :bind (("C-c t" . ansi-term))
        :config
        (defadvice term-sentinel (around ansi-term-kill-buffer (proc msg))
          (if (memq (process-status proc) '(signal exit))
              (let ((buffer (process-buffer proc)))
                ad-do-it
                (kill-buffer buffer))
            ad-do-it))
        (ad-activate 'term-sentinel)
        (defadvice ansi-term (before ansi-term-force-shell)
          (interactive (list (getenv "SHELL"))))
        (ad-activate 'ansi-term)
        (add-hook 'term-mode-hook 'goto-address-mode)
        (add-hook 'term-exec-hook
                  '(lambda ()
                     (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))))
    #+END_SRC

*** eshell
    Another enhancement for the shell

    #+BEGIN_SRC emacs-lisp
      (use-package eshell
        :bind (("C-c e" . eshell))
        :config
        (defun fn/eshell-rename-buffer-before-command ()
          (let* ((last-input
                  (buffer-substring eshell-last-input-start eshell-last-input-end)))
            (rename-buffer
             (format "*eshell[%s]$ %s...*" default-directory last-input) t)))
        (defun fn/eshell-rename-buffer-after-command ()
          (rename-buffer
           (format "*eshell[%s]$ %s*" default-directory
                   (eshell-previous-input-string 0)) t))
        (add-hook 'eshell-pre-command-hook
                  'zakame/eshell-rename-buffer-before-command)
        (add-hook 'eshell-post-command-hook
                  'zakame/eshell-rename-buffer-after-command)
        (use-package em-smart)
        (setq eshell-where-to-jump 'begin
              eshell-review-quick-commands nil
              eshell-smart-space-goes-to-end t)
        (add-hook 'eshell-mode-hook
                  (lambda ()
                    (eshell-smart-initialize))))
    #+END_SRC
*** paradox
    An improvement for the package manager

    #+BEGIN_SRC emacs-lisp
      (use-package paradox
        :ensure t
        :bind (("C-c C-p" . paradox-list-packages)))
    #+END_SRC

*** smart-mode-line
    It is a nice feature

    #+BEGIN_SRC emacs-lisp
      (use-package smart-mode-line-powerline-theme
        :ensure t)

      (use-package smart-mode-line
        :ensure t
        :config
        (setq sml/no-confirm-load-theme t)
        (setq sml/theme 'powerline)
        (sml/setup))
    #+END_SRC

*** powerline
    A neat addition the mode line

    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :ensure t
        :config
        (powerline-default-theme))
    #+END_SRC
*** window-numbering
    A must to navigate through windows with numbers.

    For now, I'm moving on to [[ace-window]] it eats up the prefix argument.

    Note that this must be after [[smart-mode-line]]

    #+BEGIN_SRC emacs-lisp
      (use-package window-numbering
        :ensure t
        :config
        (window-numbering-mode t))
    #+END_SRC

*** golden-ratio
    Makes windows large enough to see.

    #+BEGIN_SRC emacs-lisp
      (use-package golden-ratio
        :ensure t
        :after window-numbering
        :diminish golden-ratio-mode
        :bind (("C-c q" . golden-ratio))
        :config
        (golden-ratio-mode t)
        (setq split-width-threshold nil)

        (defun select-rationed-window-1 ()
          (interactive)
          (select-window-1)
          (golden-ratio))
        (defun select-rationed-window-2 ()
          (interactive)
          (select-window-2)
          (golden-ratio))
        (defun select-rationed-window-3 ()
          (interactive)
          (select-window-3)
          (golden-ratio))
        (defun select-rationed-window-4 ()
          (interactive)
          (select-window-4)
          (golden-ratio))
        (defun select-rationed-window-5 ()
          (interactive)
          (select-window-5)
          (golden-ratio))
        (defun select-rationed-window-6 ()
          (interactive)
          (select-window-6)
          (golden-ratio))
        (defun select-rationed-window-7 ()
          (interactive)
          (select-window-7)
          (golden-ratio))
        (defun select-rationed-window-8 ()
          (interactive)
          (select-window-8)
          (golden-ratio))
        (defun select-rationed-window-9 ()
          (interactive)
          (select-window-9)
          (golden-ratio))

        (define-key window-numbering-keymap (kbd "M-1") 'select-rationed-window-1)
        (define-key window-numbering-keymap (kbd "M-2") 'select-rationed-window-2)
        (define-key window-numbering-keymap (kbd "M-3") 'select-rationed-window-3)
        (define-key window-numbering-keymap (kbd "M-4") 'select-rationed-window-4)
        (define-key window-numbering-keymap (kbd "M-5") 'select-rationed-window-5)
        (define-key window-numbering-keymap (kbd "M-6") 'select-rationed-window-6)
        (define-key window-numbering-keymap (kbd "M-7") 'select-rationed-window-7)
        (define-key window-numbering-keymap (kbd "M-8") 'select-rationed-window-8)
        (define-key window-numbering-keymap (kbd "M-9") 'select-rationed-window-9)
        (define-key window-numbering-keymap (kbd "M-0") 'select-rationed-window-0))
    #+END_SRC

*** workgroups
    Saving window state is very helpful specially when you move a lot

    #+BEGIN_SRC emacs-lisp
      (use-package workgroups2
        :ensure t
        :diminish workgroups-mode
        :config
        (setq wg-prefix-key (kbd "C-c w"))
        (setq wg-session-file (expand-file-name ".emacs_workgroups" user-emacs-directory))

        (setq wg-morph-on nil)

        (setq wg-emacs-exit-save-behavior           'save)
        (setq wg-workgroups-mode-exit-save-behavior 'save)

        (setq wg-mode-line-display-on t)
        (setq wg-flag-modified t)
        (setq wg-mode-line-decor-left-brace "["
              wg-mode-line-decor-right-brace "]"
              wg-mode-line-decor-divider ":")

        (workgroups-mode 1))
   #+END_SRC

*** which-keys
    Another key bindings

    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :diminish which-key-mode
        :config
        (which-key-mode))
    #+END_SRC

*** command-log
    A command log when needed

    #+BEGIN_SRC emacs-lisp
      (use-package command-log-mode
        :ensure t
        :diminish command-log-mode
        :config
        (global-command-log-mode t))
    #+END_SRC

*** smooth-scrolling
    Smooth scrolling is nice, when I want to use =next-line= to =prev-line= to scroll; this behavior makes sense for me.

    #+BEGIN_SRC emacs-lisp
      (use-package smooth-scrolling
        :ensure t
        :config
        (require 'smooth-scrolling))
    #+END_SRC
*** undo-tree
    You got to have this

    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :diminish undo-tree-mode
        :ensure t
        :config
        (global-undo-tree-mode 1))
    #+END_SRC

*** expand-region
    Another great features

    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :ensure t
        :bind (("C-=" . er/expand-region)))
    #+END_SRC

*** multiple-cursors
    This functions is does not get too much attention

    #+BEGIN_SRC emacs-lisp
      (use-package multiple-cursors
        :ensure t
        :bind (("C-S-c C-S-c" . mc/edit-lines)
               ("C->" . mc/mark-next-like-this)
               ("C-<" . mc/mark-previous-like-this)
               ("C-c C-<" . mc/mark-all-like-this)))
    #+END_SRC
*** hungry-delete
    Whitespace organization

    #+BEGIN_SRC emacs-lisp
      (use-package hungry-delete
        :diminish hungry-delete-mode
        :ensure t
        :config
        (global-hungry-delete-mode))
    #+END_SRC

*** aggressive-indent
    This is too much to pass up

    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
        :ensure t
        :diminish aggressive-indent-mode
        :config
        (global-aggressive-indent-mode t))
    #+END_SRC

*** smartparens
    This is as handy as =paredit=

    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :diminish smartparens-mode
        :ensure t
        :config
        (use-package smartparens-config)
        (smartparens-global-mode 1))
    #+END_SRC

*** uniquify
    Nicer naming convention

    #+BEGIN_SRC emacs-lisp
      (use-package uniquify
        :if (version<= emacs-version "24.3.1")
        :config
        (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
    #+END_SRC
*** diff-hl
    Diffing tool

    #+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :ensure t
        :config
        (global-diff-hl-mode)
        (setq diff-hl-side 'left)
        (diff-hl-margin-mode)
        (eval-after-load "magit"
          '(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))
    #+END_SRC

*** markdown
    Some basic =Markdown= editing

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :mode "\\.md\\'"
        :config
        (setq markdown-command "Markdown.pl")) ;; NOTE: Command pending
    #+END_SRC

*** org
    org-mode my buddy. This is filed under external modes since I download a new copy of org mode to be updated.

    Some basic setup which I use =org-drill= and =org-journal=

    Here is a reference to the  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html][date time format]].

    #+BEGIN_SRC emacs-lisp
      (use-package org
        :bind (("C-c l" . org-store-link)
               ("C-c a" . org-agenda)
               ("C-c h" . helm-org-in-buffer-headings))
        :config
        ;; Config
        (setq org-log-done 'time)

        ;; Setup
        (add-to-list 'org-modules 'org-drill)

        ;; Todo
        (setq org-todo-keywords
              '((sequence "INVESTIGATE(i)" "TODO(t)" "PENDING(p)" "|" "DONE(d)" "CANCELLED(c)")))

        ;; Capture
        (setq org-directory
              (expand-file-name "~/Fakespace/nobody-library"))
        (setq org-default-notes-file (concat org-directory "/capture.org")) ;; Personal org library

        (setq org-main-file (expand-file-name "main.org" org-directory))
        (setq org-review-file (expand-file-name "learning.org" org-directory))
        (setq org-todo-file (expand-file-name "todo.org" org-directory))
        (setq org-blog-file (expand-file-name "fnlog.org" org-directory))

        (define-key global-map "\C-cc" 'org-capture)  ;; Use suggested key binding
        (setq org-capture-templates
              (list
               (list "t" "Todo" 'entry
                     (list 'file+headline org-todo-file "Todo")
                     "* INVESTIGATE %?\n   %i\n  %a")
               (list "r" "Review/Remember" 'entry
                     (list 'file+headline org-review-file "Learning Notes" "Review")
                     "* %? :drill:\n  CREATED_ON: %T")))

        ;; Agenda
        (setq org-agenda-span 14) ;; Fortnight

        (setq org-planning-files
              (list
               org-main-file
               org-blog-file
               ))

        (setq org-task-files
              (list
               org-todo-file
               org-review-file))

        (setq org-agenda-files
              (append
               org-planning-files
               org-task-files))

        (setq org-refile-targets nil) ;; TODO: Make refile tagets

        ;; org-drill
        (require 'org-drill)
        (setq org-drill-scope
              (list org-review-file))

        ;; org-journal
        (use-package org-journal
          :ensure t
          :bind (("C-c e" . org-journal-new-entry)) ;; C-c j conflicts with normal org-mode
          :config
          (setq org-journal-dir
                (expand-file-name "diary" org-directory))

          (setq org-journal-date-format "%Y-%b-%d %a") ;; YYYY-MMM-DD DAY
          (setq org-journal-time-format "%T ") ;; HH:MM:SS and the space is required

          (setq org-journal-file-format "%Y-%m-%d.journal.org.gpg") ;; Encryption via epa

          (defun fn/insert-private-file-headers ()
            (interactive)
            (add-file-local-variable-prop-line 'backup-inhibited t)
            (add-file-local-variable-prop-line 'auto-save-default nil))

          (defun fn/insert-org-gpg-headers ()
            (interactive)
            (add-file-local-variable-prop-line
             'epa-file-encrypt-to (list "fnmurillo@yandex.com"))
            (fn/insert-private-file-headers))

          (defun fn/insert-org-journal-headers ()
            (interactive)
            (fn/insert-org-gpg-headers)

            (end-of-visual-line)
            (newline-and-indent)

            (when (string-match "\\(20[0-9][0-9]\\)-\\([0-9][0-9]\\)-\\([0-9][0-9]\\)"
                                (buffer-name))
              (let ((year  (string-to-number (match-string 1 (buffer-name))))
                    (month (string-to-number (match-string 2 (buffer-name))))
                    (day (string-to-number (match-string 3 (buffer-name))))
                    (datim nil))
                (setq datim (encode-time 0 0 0 day month year))

                (insert "#+STARTUP: content\n")
                (insert (format-time-string
                         "#+TITLE: Journal Entry - %Y-%b-%d %a\n" datim))
                (insert (format-time-string
                         "* %Y-%b-%d %a" datim)))))

          (auto-insert-mode t)
          (setq auto-insert-query t) ;; Don't ask, just put it in there
          (add-hook 'find-file-hook 'auto-insert)

          (add-to-list 'auto-insert-alist '(".*\.org\.gpg$" . fn/insert-org-gpg-headers))
          (add-to-list 'auto-insert-alist '(".*\.private.org" . fn/insert-private-file-headers))
          (add-to-list 'auto-insert-alist '(".*\.journal.org.gpg" . fn/insert-org-journal-headers)))

        (require 'org-mobile)
        (setq org-mobile-directory
              (expand-file-name "mobile" org-directory))
        (setq org-mobile-inbox-for-pull
              (expand-file-name "mobile-pull" org-directory))
        (setq org-mobile-files
              (list org-review-file)))

    #+END_SRC

**** org-reveal
     A nice presentation framework

     #+BEGIN_SRC emacs-lisp
       (use-package htmlize
         :ensure t
         :after ox-reveal)

       (use-package ox-reveal
         :ensure t
         :config
         (setq org-reveal-root "file:////home/fnmurillo/Fakespace/reveal-js")
         )
     #+END_SRC

*** engine
    Instant search with Emacs, sign me up.

    #+BEGIN_SRC emacs-lisp
      (use-package engine-mode
        :ensure t
        :config
        (engine-mode t)

        (engine/set-keymap-prefix (kbd "C-c s"))
        (setq engine/browser-function 'browse-url-firefox)

        (defengine amazon
          "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")

        (defengine duckduckgo
          "https://duckduckgo.com/?q=%s"
          :keybinding "d")

        (defengine emacsgo
          "https://duckduckgo.com/?q=emacs+%s"
          :keybinding "e")

        (defengine github
          "https://github.com/search?ref=simplesearch&q=%s"
          :keybinding "g")

        (defengine project-gutenberg
          "http://www.gutenberg.org/ebooks/search/?query=%s")

        (defengine rfcs
          "http://pretty-rfc.herokuapp.com/search?q=%s")

        (defengine stack-overflow
          "https://stackoverflow.com/search?q=%s"
          :keybinding "t")

        (defengine twitter
          "https://twitter.com/search?q=%s")

        (defengine wikipedia
          "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
          :keybinding "w"
          :docstring "Searchin' the wikis.")

        (defengine wiktionary
          "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

        (defengine wolfram-alpha
          "http://www.wolframalpha.com/input/?i=%s")

        (defengine youtube
          "http://www.youtube.com/results?aq=f&oq=&search_query=%s"))
    #+END_SRC

*** projectile
    Must have a project finder when using a project.

    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :diminish projectile-mode
        :config
        (projectile-global-mode t)
        (setq projectile-indexing-method 'native)
        (add-to-list 'projectile-project-root-files "config.xml"))
    #+END_SRC

*** helm
    The revolutionary package to find

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :diminish helm-mode
        :bind (("M-x" . helm-M-x)
               ("C-c f" . helm-recentf)
               ("C-h a" . helm-apropos)
               ("C-h r" . helm-info-emacs)
               ("C-x b" . helm-mini)
               ("C-x C-b" . helm-buffers-list)
               ("C-x C-f" . helm-find-files)
               ("M-s o" . helm-occur))
        :config
        (require 'helm-config)
        (setq helm-mode-fuzzy-match t)
        (setq helm-completion-in-region-fuzzy-match t)

        (setq helm-split-window-in-side-p t
              helm-yank-symbol-first t
              helm-buffers-fuzzy-matching t
              helm-apropos-fuzzy-match t
              helm-recentf-fuzzy-match t
              helm-semantic-fuzzy-match t
              helm-locate-fuzzy-match t
              helm-ff-file-name-history-use-recentf t
              helm-su-or-sudo "su"
              helm-ff-auto-update-initial-value t)

        (helm-mode t)
        (helm-adaptive-mode t)
        (helm-autoresize-mode t)

        (add-hook 'eshell-mode-hook
                  (lambda ()
                    (define-key eshell-mode-map
                      [remap eshell-pcomplete]
                      'helm-esh-pcomplete)
                    (define-key eshell-mode-map
                      (kbd "M-p")
                      'helm-eshell-history)))

        (ido-mode -1))

            (use-package helm-descbinds
              :ensure t
              :after helm
              :bind (("C-h b" . helm-descbinds)))

            (use-package helm-projectile
              :ensure t
              :after helm
              :bind (("C-c p h" . helm-projectile)
                     ("C-c p p" . helm-projectile-switch-project))
              :config
              (setq projectile-completion-system 'helm)
              (helm-projectile-on))

            (use-package helm-swoop
              :ensure t
              :after helm
              :bind (("M-i" . helm-swoop)
                     ("C-c M-i" . helm-multi-swoop))
              :config
              (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
              (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
              (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
              (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line))

            (use-package wgrep-helm
              :ensure t
              :after helm
              :config
              (setq wgrep-auto-save-buffer t))
    #+END_SRC

*** magit
    Enough said, [[https://github.com/magit/magit][magit]] is the best git client you can get anywhere.

    There is a sad version requirement for 24.4 to use the latest code.

    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t
        :if (version<= "24.4.4" emacs-version)
        :bind (("C-c g" . magit-status)
               ("M-g b" . magit-blame))
        :init
        (setq magit-push-always-verify t))

      (use-package git-timemachine
        :ensure t
        :bind (("M-g t" . git-timemachine)))

      (use-package git-gutter
        :ensure t
        :diminish git-gutter-mode
        :config
        (global-git-gutter-mode t))
    #+END_SRC

*** autocomplete
    Autocomplete is a must have feature

    But after a while, it seems that =company= seems more stable and easier

    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete
        :ensure t
        :diminish auto-complete-mode
        :config
        (require 'auto-complete-config)
        (ac-config-default)
        (global-auto-complete-mode)
        (setq popup-use-optimized-column-computation nil)
        (setq ac-show-menu-immediately-on-auto-complete t)
        (ac-set-trigger-key "TAB")
        (ac-set-trigger-key "<tab>"))
    #+END_SRC
*** company
    A replacement for =autocomplete=.

    Currently, a work in progress

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package company
        :ensure t
        :config
        (global-company-mode t)

        (setq company-tooltip-limit 20)
        (setq company-tooltip-align-annotations 't)
        (setq company-idle-delay .3)
        (setq company-begin-commands '(self-insert-command))
        (global-set-key (kbd "C-c /") 'company-files))
    #+END_SRC

*** yasnippet
    Snippet system along with autocomplete is awesome

    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :after helm
        :diminish yas-minor-mode
        :defer t
        :init
        (setq yas-verbosity 3)
        :config
        (push 'yas-hippie-try-expand hippie-expand-try-functions-list))
    #+END_SRC
*** flycheck
    Syntax checking is very important

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-haskell
        :ensure t
        :init
        (eval-after-load 'flycheck
          '(add-hook 'flycheck-mode-hook #'flycheck-haskell-setup)))

      (use-package flycheck
        :ensure t
        :defer  t
        :init
        (add-hook 'js2-mode-hook 'flycheck-mode)
        (add-hook 'haskell-mode-hook 'flycheck-mode)
        (add-hook 'python-mode 'flycheck-mode)
        :config
        (flycheck-haskell-setup))
    #+END_SRC
*** flyspell
    Having a good spell checker is a must. I use =flyspell= although I have read issues about it

    #+BEGIN_SRC emacs-lisp
      (use-package flyspell
        :ensure t
        :defer t
        :init
        (add-hook 'org-mode-hook 'flyspell-mode t))
    #+END_SRC

*** paredit
    A good program pairer

    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :ensure t
        :defer t)
    #+END_SRC
** Programming Modes
   Modes for my programming experiences

*** auto-compile
    A good mode when editing lisp files

    #+BEGIN_SRC emacs-lisp
      (use-package auto-compile
        :ensure t
        :defer t
        :config
        (auto-compile-on-load-mode)
        (auto-compile-on-save-mode))
    #+END_SRC

*** emr
    Emacs Lisp refactor mode

    #+BEGIN_SRC emacs-lisp
      (use-package emr
        :ensure t
        :defer t
        :init
        (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu)
        (add-hook 'prog-mode-hook 'emr-initialize))
    #+END_SRC

*** web
    The defacto mode for web development

    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :ensure t
        :mode (("\\.tt\\'" . web-mode)
               ("\\.erb\\'" . web-mode)
               ("\\.html\\.ep\\'" . web-mode)
               ("\\.blade\\.php\\'" . web-mode)
               ("\\.hbs\\'" . web-mode))
        :init
        (dolist (hook '(emmet-mode ac-emmet-html-setup ac-emmet-css-setup))
          (add-hook 'web-mode-hook hook))
        :config
        (setq web-mode-enable-auto-pairing t
              web-mode-enable-auto-closing t
              web-mode-enable-current-element-highlight t
              web-mode-enable-current-column-highlight t
              web-mode-ac-sources-alist
              '(("css" . (ac-source-css-property ac-source-emmet-css-snippets))
                ("php" . (ac-source-yasnippet))
                ("html" . (ac-source-emmet-html-aliases
                           ac-source-emmet-html-snippets)))))
    #+END_SRC

*** emmet
    I do a lot of HTML editing, YASnippet can do but emmet is better

    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        :defer t
        :init
        (dolist (hook '(sgml-mode-hook css-mode-hook kolon-mode-hook))
          (add-hook hook 'emmet-mode)))

      (use-package ac-emmet
        :ensure t
        :commands (ac-emmet-html-setup ac-emmet-css-setup)
        :init
        (add-hook 'sgml-mode-hook 'ac-emmet-html-setup)
        (add-hook 'css-mode-hook 'ac-emmet-css-setup))
    #+END_SRC

*** sass
    I use [[http://sass-lang.com/][sass]] for my jekyll blog

    #+BEGIN_SRC emacs-lisp
      (use-package sass-mode
        :ensure t
        :defer t
        :config
        ((add-to-list 'auto-mode-alist '("\\.sass\\'" . sass-mode))))
    #+END_SRC
*** js2
    A great mode for progressive nodejs

    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :interpreter (("node" . js2-mode))
        :mode (("\\.jsx\\'" . js2-jsx-mode)
               ("\\.\\(js\\|json\\)$" . js2-mode))
        :defer t
        :config
        (add-hook 'js-mode-hook 'js2-minor-mode)
        (setq js2-highlight-level 3
              js2-mode-show-parse-errors nil
              js2-mode-show-strict-warnings nil))

      (use-package ac-js2
        :ensure t
        :defer t
        :init
        (add-hook 'js2-mode-hook 'auto-complete-mode)
        (add-hook 'js2-mode-hook 'ac-js2-mode)
        (setq ac-js2-evaluate-calls t))

      (use-package web-beautify
        :after js2-mode
        :ensure t
        :bind (("C-c C-b" . web-beautify-js)))

      (use-package js2-refactor
        :defer t
        :commands js2-refactor-mode
        :diminish js2-refactor-mode
        :ensure t
        :init
        (add-hook 'js2-mode-hook #'js2-refactor-mode)
        :config
        (js2r-add-keybindings-with-prefix "C-c C-m"))

      (use-package js-doc
        :ensure t
        :after js2-mode
        :init
        (add-hook 'js2-mode-hook
                  #'(lambda ()
                      (define-key js2-mode-map "\C-ci" 'js-doc-insert-function-doc)
                      (define-key js2-mode-map "@" 'js-doc-insert-tag)))


        (setq js-doc-mail-address user-mail-address
              js-doc-author (format "I am <%s>" js-doc-mail-address)
              js-doc-url "francismurillo.github.io"
              js-doc-license "GPL"))

      (use-package json-snatcher
        :ensure t
        :after js2-mode
        :bind (("C-c C-g" . jsons-print-path)))

      (use-package react-snippets
        :ensure t
        :defer t)
    #+END_SRC
*** tern
    A must have for Javascript development

    #+BEGIN_SRC emacs-lisp
      (use-package tern
        :ensure t
        :defer t
        :diminish tern-mode
        :init
        (setq-default tern-project-dir "~")
        (add-hook 'js2-mode-hook 'tern-mode)
        )

      (use-package tern-auto-complete
        :ensure t
        :after tern
        :config
        (tern-ac-setup))
    #+END_SRC
*** nodejs-repl
    A quick repl for node that works

    #+BEGIN_SRC emacs-lisp
      (use-package nodejs-repl
        :ensure t
        :bind (("C-c C-n C-c" . nodejs-repl-send-buffer)
               ("C-c C-n C-r" . nodejs-repl-send-region)
               ("C-c C-n C-e" . nodejs-repl-send-last-sexp))
        :after js2-mode)
    #+END_SRC
*** skewer
    Live Javascript editing at your fingertips

    #+BEGIN_SRC emacs-lisp
      (use-package skewer-mode
        :defer t
        :diminish skewer-mode
        :bind (("C-c K" . run-skewer))
        :ensure t
        :init
        (add-hook 'js2-mode-hook 'skewer-mode)
        (add-hook 'css-mode-hook 'skewer-css-mode)
        (add-hook 'html-mode-hook 'skewer-html-mode))
    #+END_SRC

*** python
    My favorite programming language, unassuming like Marcy from Peanuts

    #+BEGIN_SRC emacs-lisp
      (use-package python
        :defer t
        :ensure t)
    #+END_SRC

    Some basic python requirements

    #+BEGIN_SRC emacs-lisp
      (use-package py-autopep8
        :ensure t
        :defer t)

      (use-package ein
        :ensure t
        :defer t
        :config
        (setq ein:use-auto-complete t)
        (setq ein:use-smartrep t))
    #+END_SRC

*** elpy
    Making Python an IDE

    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :ensure t
        :defer t
        :init
        (add-hook 'python-mode-hook 'elpy-enable)

        (add-hook 'elpy-mode-hook 'flycheck-mode)
        (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
        :config
        (setq elpy-python-command "python3")
        (setq elpy-rpc-python-command "python3")
        (setq elpy-rpc-backend "jedi")
        (setq elpy-interactive-python-command "ipython")
        (elpy-use-ipython)

        (setq elpy-modules (delq 'elpy-module-flycheck elpy-modules))

        (require 'py-autopep8)
        (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
    #+END_SRC

*** jedi
    The newer Python IDE, [[https://github.com/davidhalter/jedi][Jedi]], much easier to grok.

    This requires [[https://pypi.python.org/pypi/pip/][pip]] and the packages  [[https://pypi.python.org/pypi/virtualenv][virtualenv]]. The snippet below is for the hard dependency. Let =jedi:install-server= do the work

    #+BEGIN_SRC sh
      curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py

      python get-pip.py

      pip install virtualenv
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (use-package jedi
        :ensure t
        :defer t
        :init
        (add-hook 'python-mode-hook 'jedi:setup)
        (add-hook 'python-mode-hook 'jedi:ac-setup)
        :config
        (jedi:install-server)

        (define-key jedi-mode-map (kbd "M-.") 'jedi:goto-definition)
        (define-key jedi-mode-map (kbd "M-,") 'jedi:goto-definition-pop-marker)
        (define-key jedi-mode-map (kbd "C-M-?") 'jedi:show-doc)
        (define-key jedi-mode-map (kbd "C-M-/") 'jedi:get-in-function-call)

        (setq elpy-rpc-backend "jedi")
        (add-to-list 'ac-sources 'ac-source-jedi-direct)
        (setq jedi:complete-on-dot t))
    #+END_SRC

*** latex
    LaTeX editing is a must

    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** omnisharp
    For C# development

    #+BEGIN_SRC emacs-lisp
      (use-package omnisharp
        :ensure t
        :defer t
        :init
        (add-hook 'csharp-mode-hook 'omnisharp-mode)
        :config
        (setq omnisharp-root-dir
              (expand-file-name "~/Fakespace/omnisharp-server"))
        (setq omnisharp-server-executable-path
              (expand-file-name "OmniSharp/bin/Debug/" omnisharp-root-dir)))
    #+END_SRC
*** haskell
    The defacto for Haskell development

    #+BEGIN_SRC emacs-lisp
      (use-package structured-haskell-mode
        :load-path "elisp/structured-haskell-mode/elisp/"
        :init
        ;; Requires to be in exec
        (require 'shm)
        :config
        ;; (define-key shm-map  "\C-j" 'shm/newline-indent)
        (define-key shm-map  "\M-a" 'shm/goto-parent)
        (define-key shm-map  "\M-e" 'shm/goto-parent-end)
        ;; (define-key shm-map  "\C-+" 'shm/add-operand)
        (define-key shm-map  "\M-r" 'shm/raise)
        (define-key shm-map  "\M-^" 'shm/delete-indentation)
        (define-key shm-map  "\M-k" 'shm/kill)
        (define-key shm-map  "\C-y" 'shm/yank)
        (define-key shm-map  "\M-k" 'shm/kill-line)
        (define-key shm-map (kbd "C-c C-s") 'shm/case-split))

      (use-package hindent
        :ensure t
        :init
        (add-hook 'haskell-mode-hook #'hindent-mode)
        (setq hindent-style "johan-tibell"))

      (use-package haskell-mode
        :ensure t
        :defer t
        :init
        (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
        (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
        (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
        (add-hook 'haskell-mode-hook 'structured-haskell-mode)
        :config
        (require 'haskell-interactive-mode)
        (require 'haskell-process)

        (setq interactive-haskell-mode t)
        (setq haskell-stylish-on-save t)

        (define-key haskell-mode-map (kbd "<f8>") 'haskell-navigate-imports)
        (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile)
        (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-compile)

        (define-key haskell-mode-map (kbd "C-x C-d") nil)
        (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
        (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-file)
        (define-key haskell-mode-map (kbd "C-c C-b") 'haskell-interactive-switch)
        (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
        (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
        (define-key haskell-mode-map (kbd "C-c M-.") nil)
        (define-key haskell-mode-map (kbd "C-c C-d") nil)

        (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
        (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
        (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
        (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
        (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
        (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
        (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)

        (define-key haskell-cabal-mode-map (kbd "C-`") 'haskell-interactive-bring)
        (define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
        (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
        (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)

        (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def)

        (setq
         haskell-process-suggest-remove-import-lines t
         haskell-process-auto-import-loaded-modules t
         haskell-process-log t
         haskell-process-suggest-hoogle-imports t
         haskell-interactive-mode-eval-mode 'haskell-mode))
    #+END_SRC

** Utility Modes
*** twittering
    Integrating with emacs is very fun via [[https://github.com/hayamiz/twittering-mode][twittering]]

    #+BEGIN_SRC emacs-lisp
      (use-package twittering-mode
        :ensure t
        :defer t
        :init
        (setq twittering-auth-method 'oauth)
        (setq twittering-use-master-password t)
        :config
        (twittering-icon-mode t)
        (setq twittering-convert-fix-size 24))
    #+END_SRC
*** bbdb
    People organization

    #+BEGIN_SRC emacs-lisp
      (use-package bbdb
        :ensure t
        :defer t
        :config
        (bbdb-initialize)
        (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
    #+END_SRC
** Sandbox Modes
   Experimental modes, see if it sticks or is useful

   #+BEGIN_SRC emacs-lisp

   #+END_SRC

*** js-comint
    Just a quick REPL

    #+BEGIN_SRC emacs-lisp
      (use-package js-comint
        :ensure t
        :config
        (setq inferior-js-program-command "/usr/bin/java org.mozilla.javascript.tools.shell.Main"))
    #+END_SRC

*** deft
    Seems good for note taking

    #+BEGIN_SRC emacs-lisp
          (use-package deft
            :ensure t
            :disabled t
            :config
            (setq deft-extension "org"
                  deft-directory (expand-file-name "~/deft/" user-emacs-directory)
                  deft-text-mode 'org-mode)
            (deft-setup)
            (global-set-key [f8] 'deft))

    #+END_SRC
* Scripts
** starup and shutdown hook
   Small script to update my org files

   #+BEGIN_SRC emacs-lisp
     (defun fn/startup ()
       (interactive)
       (shell-command "cd ~/Fakespace/nobody-library && git pull origin master"))

     (defun fn/cleanup ()
       (interactive)
       (shell-command "cd ~/Fakespace/nobody-library\
      && git add diary/*\
      && git commit -a -m \"Home Update\"\
      && git push origin master"))
   #+END_SRC

** projectile-init script
   This script runs .projectile-hook.el in each project root to ease development

   #+BEGIN_SRC emacs-lisp
     (defun fn/load-projectile-hook ()
       (interactive)
       (mapcar (lambda (project)
        (setq fn/current-project (expand-file-name project))
        (load
         (expand-file-name ".projectile-hook" fn/current-project)
         t))
 projectile-known-projects))
   #+END_SRC

** Open current buffer as root
   Taken from Mastering Emacs, this opens the current buffer as root via TRAMP

   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** Create media diary
   A personal script to bundle my journal, recordings and images into one org file. Not to be consumed by anyone else

   #+BEGIN_SRC emacs-lisp
     (defun fn/compile-media-diary ()
       (interactive)
       (setq md-root "~/Mountain/diary/media-diary"
             md-file "media-diary.org"

             md-journal-dir-name "journal"
             md-audio-dir-name "audio"
             md-photo-dir-name "photo"

             md-journal-dir (expand-file-name md-journal-dir-name md-root)
             md-audio-dir (expand-file-name md-audio-dir-name md-root)
             md-photo-dir (expand-file-name md-photo-dir-name md-root)

             md-title "Media Diary"
             md-note-title "Notes"
             md-journal-title "Journal"
             md-media-title "Media"

             md-note-text "Something profound happened to me but I forgot"

             md-journal-time-format "%b. %d, %Y"
             md-audio-time-format "%b. %d, %Y %T - Recording"
             md-photo-time-format "%b. %d, %Y %T - Photograph")

       (defun replace-in-string (what with in)
         (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

       (defun directory-files-by-extension (directory extension)
         (directory-files directory nil
                          (format-message "\\.%s$" extension)))

       (defun parse-date-from-filename (file)
         (setq filename
               (file-name-sans-extension (file-name-nondirectory file)))
         (apply 'encode-time
                (parse-time-string (concat filename " " "00:00:00"))))


       (defun parse-time-from-filename (file)
         (setq filename
               (file-name-sans-extension (file-name-nondirectory file))
               date-time (split-string filename "_")
               date-text (car date-time)
               time-text (replace-in-string "-" ":" (car (cdr date-time)))
               date-time-text (concat date-text " " time-text))

         (apply 'encode-time
                (parse-time-string date-time-text)))

       (defun insert-org-header (header)
         (org-insert-heading t nil t)
         (insert header))

       (defun insert-org-subheader (subheader)
         (end-of-buffer)
         (org-insert-heading t nil t)
         (insert subheader)
         (org-demote))

       (defun insert-org-link (link title)
         (end-of-buffer)
         (org-insert-heading t)
         (org-insert-link nil link title))

       (defun once (f)
         (lexical-let ((g f)
                       (is-invoked nil))
           (lambda ()
             (if is-invoked nil
               (progn
                 (setq is-invoked t)
                 (funcall g))))))

       (defun insert-file-headers ()
         (insert "# -*- epa-file-encrypt-to: (\"fnmurillo@yandex.com\"); -*-\n")
         (insert "# -*- backup-inhibited: t; auto-save-default: nil; -*-\n")

         (insert "#+STARTUP: content\n")
         (insert "#+OPTIONS: toc:nil\n"))

       (defun render-header ()
         (insert-org-header md-title))

       (defun render-note-section ()
         (insert-org-subheader md-note-title)
         (newline-and-indent)
         (insert md-note-text))

       (defun render-journal-section ()
         (insert-org-subheader md-journal-title)
         (setq journal-files
               (directory-files-by-extension md-journal-dir "org"))

         (setq value nil
               demote-first (once (lambda () (org-demote))))

         (dolist (journal-file journal-files value)
           (progn
             (setq journal-time (parse-date-from-filename journal-file)
                   journal-title
                   (format-time-string md-journal-time-format journal-time))

             (insert-org-link
              (concat "file:" md-journal-dir-name "/" journal-file)
              journal-title)
             (funcall demote-first)
             (org-set-property "CREATED_ON"
                               (format-time-string "%F %T" journal-time)))))

       (defun render-media-section ()
         (insert-org-subheader md-media-title)
         (setq photo-files
               (directory-files-by-extension md-photo-dir "jpg")
               audio-files
               (directory-files-by-extension md-audio-dir "wav")
               media-files
               (sort (append photo-files audio-files)
                     (lambda (left right)
                       (progn
                         (setq result
                               (compare-strings
                                (file-name-sans-extension left) nil nil
                                (file-name-sans-extension right) nil nil
                                nil))
                         (if (booleanp result) t
                           (if (> result 0) nil t))))))

         (setq value nil
               demote-first (once (lambda () (org-demote))))

         (intern-soft "photo")
         (intern-soft "audio")

         (dolist (media-file media-files values)
           (progn
             (setq media-time (parse-time-from-filename media-file)
                   media-type
                   (if (string-equal (file-name-extension media-file) "wav")
                       'audio 'photo)
                   media-time-format
                   (if (eq media-type 'audio) md-audio-time-format md-photo-time-format)
                   media-dir-name
                   (if (eq media-type 'audio) md-audio-dir-name md-photo-dir-name)
                   media-title (format-time-string media-time-format media-time))

             (insert-org-link
              (concat "file:" media-dir-name "/" media-file)
              media-title)
             (funcall demote-first)
             (org-set-property "CREATED_ON"
                               (format-time-string "%F %T" media-time)))))

       (find-file
        (expand-file-name md-file md-root))

       (insert-file-headers)
       (render-header)
       (render-note-section)
       (render-journal-section)
       (render-media-section)

       (beginning-of-buffer)
       (org-set-startup-visibility))

     (defun fn/rename-link ()
       (interactive)
       (setq org-element (org-element-context)
             org-path (org-element-property :raw-link org-element)
             org-link (org-element-property :path org-element))
       (org-insert-link nil org-path nil))
   #+END_SRC
** open config file
   This is just a convenience to open this config file

   #+BEGIN_SRC emacs-lisp
     (defun fn/find-config-file ()
       (interactive)
       (find-file (expand-file-name "config.org" user-emacs-directory)))
   #+END_SRC
**
* Reference
  - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]: I took her configuration as a base to make this org configuration
  - [[https://github.com/zakame/.emacs.d][Zak Elep]]: One of the master and first known ally.
