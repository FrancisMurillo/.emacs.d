#+TITLE: Francis Murillo's Emacs configuration
#+AUTHOR: Frncis Murillo
#+OPTIONS: toc:4 h:4

* Introduction
** If I Forget
   No words can describe my awe with Emacs and continue to do so. A text editor with a lisp interpreter, it's concept is so simple and sublime. What joy.

   I remember starting Emacs seriously at around August of 2015. Before then, I picked it up lightly and thought(not use) about it; but what really drove me to use it is.
   - Growth :: I was using an IDE before and somebody told me that GUIs change but the shell remains the same. I found myself over time exploring keyboard shortcuts, better terminals and Emacs(or maybe vi).
   - Lightweight :: I had a crappy laptop that always needed to be plugged, had a lot dead pixels, and closes when it overheats; I needed something that would work with what I had.
   - Linux :: Moving from Windows to Linux forced me to reevaluate the software I used. Adopting a new philosophy and OS pushed me in the right direction

   Whatever the reason might have been. I just want to say I'm a happy Emacs user and I find comfort and joy in hearing other people talk and share about it.
** About My Configuration
   I use org-babel as my configuration file once I heard you can do so. Splitting the configuration to multiple files was the plan but the way it weaves nicely to documentation immediately drew me in.

   You can load this with =(org-babel-load-file "/path/to/file")= if you need to reload any changes.

   This is my =init.el= to allow org-babel to read from it. My only problem is having the static org-mode in the elisp folder, you have to copy the elisp folder as well to make the configuration work as is.

   #+BEGIN_SRC emacs-lisp :tangle no
     (unless (>= emacs-major-version 24)
       (message "This config works only for Emacs version 24 and higher")
       (kill-emacs))

     ;; Helper functions
     (defun string/ends-with (s ending)
       "Return non-nil if string S ends with ENDING."
       (cond ((>= (length s) (length ending))
              (let ((elength (length ending)))
                (string= (substring s (- 0 elength)) ending)))
             (t nil)))

     (require 'cl)
     (setq load-path
           (remove-if
            (lambda (text) (string/ends-with text "org"))
            load-path))

     ;; customize loading the packages
     (package-initialize t)

     ;; Modify the hard dependencies
     ;; org-mode used to be here

     ;; Load the rest of the packages
     (package-initialize nil)

     ;; Configuration bootstrapping
     ;; use-package is fundamental to this configuration
     (unless (package-installed-p 'use-package)
       (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
       (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
       (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

       (package-refresh-contents)
       (package-install 'use-package)
       (require 'use-package)

       (use-package org
         :ensure t)
       (use-package org-plus-contrib
         :ensure t)

       ;; Weird dependency
       (use-package dash
         :ensure t)
       (kill-emacs))

     ;; This part assumes ony org-babel-load-file is available
     (setq package-enable-at-startup nil)
     (org-babel-load-file
      (expand-file-name "config.org" user-emacs-directory))
   #+END_SRC

   Or with an function instead

   #+BEGIN_SRC emacs-lisp
     (defun fn/reload-config ()
     (interactive)
     (org-babel-load-file
      (expand-file-name "config.org" user-emacs-directory)))
   #+END_SRC

   Also the code formatting needs to be uniform within the code blocks

   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

* Configuration
** Personal Options
   Just some things that relate to me

   #+BEGIN_SRC emacs-lisp
     (setq
      user-full-name "Francis Murillo"
      user-mail-address "francisavmurillo@gmail.com")
   #+END_SRC

   And load some secret configuration

   #+BEGIN_SRC emacs-lisp
     (load "secret" t)
   #+END_SRC
** Installation Option
   Any configuration option I use to build Emacs

   #+BEGIN_SRC sh
     ls -al
   #+END_SRC

** Package Sources
   Add package sources if not present and reload, this should have been added in the =init.el= but checked here again for completion.

   #+BEGIN_SRC emacs-lisp
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
       (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
       (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
       (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/")))
   #+END_SRC

** Prepare Bootstrap
   Initialize everything needed to configure the rest. The two major packages =use-package= and =org= have been loaded in the =init.el= file; here are the extra bootstrapping option

   #+BEGIN_SRC emacs-lisp
     (require 'use-package)
     (setq use-package-verbose t)
   #+END_SRC

** General Configuration
*** Startup
    Startup options to stop annoying you

    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-screen t)
      (setq initial-scratch-message nil)
    #+END_SRC
*** Environment
    Some environment configuration

    #+BEGIN_SRC emacs-lisp
      (set-language-environment "UTF-8")
    #+END_SRC

    How about changing some options

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Backups
    Backups are good, just annoying when things are good

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC

   Version control is good, like wise.

   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions -1)
     (setq version-conrol t)
     (setq backup-by-copying t)
     (setq vc-make-backup-files t)
     ;; FIXME: Hard coded path?
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+END_SRC

*** History
    Save minibuffer history

    #+BEGIN_SRC emacs-lisp
      (savehist-mode 1)

      (setq savehist-file (expand-file-name "savehist" user-emacs-directory))
      (setq history-length t)
      (setq history-delete-duplicates t)
      (setq savehist-save-minibuffer-history 1)
      (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
    #+END_SRC

*** Variables
    Some preset variables

    #+BEGIN_SRC emacs-lisp
      (setq safe-local-variable-values '((auto-save-default) (backup-inhibited . t)))
    #+END_SRC
*** Window
    Window/Frame configuration. I prefer no clutter in my screen so I disable majority of the niceties.

    #+BEGIN_SRC emacs-lisp
      (tooltip-mode -1)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
    #+END_SRC
*** Buffer
    Some buffer configurations

    #+BEGIN_SRC emacs-lisp
      (global-whitespace-mode t)
      (global-auto-revert-mode t)
      (global-visual-line-mode t)

      (global-hl-line-mode t)
    #+END_SRC

*** Font
    I like fixed font specially DejaVu Mono

    #+BEGIN_SRC emacs-lisp
      (set-frame-font "DejaVu Sans Mono-8" t t)
    #+END_SRC

*** Theme
    Emacs theme for me. I prefer the default tsdh-dark since it's default doesn't ask too much.

    If there is no window system or in a terminal,
    #+BEGIN_SRC emacs-lisp
      (unless (window-system) (load-theme 'tsdh-light))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (when (window-system) (load-theme 'tsdh-dark))
    #+END_SRC

*** Programming
    Some programming configuration that make sense

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "RET") 'newline-and-indent)

      (setq-default indent-tabs-mode nil)
      (show-paren-mode t)
      (add-hook 'before-save-hook 'delete-trailing-whitespace)

      (setq search-whitespace-regexp ".*?")
    #+END_SRC

** Builtin Modes
*** async
    Not really builtin but should be

    #+BEGIN_SRC emacs-lisp
      (use-package async
        :ensure t)
    #+END_SRC

*** winner
    You got to have those window configuration

    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :ensure t
        :config
        (winner-mode t))
    #+END_SRC

*** ido
    =ido= has been kind to me since I started learning Emacs but learning =helm= might be better in the long term

    #+Begin_SRC emacs-lisp
      (use-package ido
        :disabled t
        :defer t
        :ensure t
        :config
        (ido-mode t)
        (ido-everywhere t)
        (setq ido-enable-flex-matching 1)
        (setq ido-show-dot-for-dired 1)

        ;; vertical ido display is better, like my taskbar
        (use-package ido-vertical-mode
              :ensure t
              :defer t
              :config
              (ido-vertical-mode t)
              (setq ido-vertical-show-count t))

        ;; flex matching is a must
        (use-package flx-ido
              :ensure t
              :defer t
              :config
              (flx-ido-mode t)
              (setq ido-enable-flex-matching t)
              (setq ido-use-faces nil))

        ;; smex is a great addition as well
        (use-package smex
          :ensure t
          :defer t
          :bind (("M-x" . smex)
    	     ("C-c C-c M-x" . execute-extended-command))
          :config
          (smex-initialize))
        )
    #+END_SRC

*** dired
    Directory management for Emacs

    #+BEGIN_SRC emacs-lisp
      (use-package dired
        :config
        (setq dired-recursive-copies 'always)
        (require 'dired-x) ;; Allows multi open marked files
        (setq dired-dwim-target t)
		(dired-async-mode t))
    #+END_SRC

*** epa
    Encryption is a must

    #+BEGIN_SRC emacs-lisp
      (require 'epa-file)
      (epa-file-enable)

      (defun fn/backup-each-save-filter (filename)
        (let ((ignored-filenames
               '("\\.gpg$"))
              (matched-ignored-filename nil))
          (mapc
           (lambda (x)
             (when (string-match x filename)
               (setq matched-ignored-filename t)))
           ignored-filenames)
          (not matched-ignored-filename)))

      (setq backup-each-save-filter-function 'fn/backup-each-save-filter)
    #+END_SRC

    Credits to [[http://conornash.com/2014/03/transparently-encrypt-org-files-in-emacs/][Conor Nash]] for this

** External Modes
*** smooth-scrolling
    Smooth scrolling is nice, when I want to use =next-line= to =prev-line= to scroll; this behavior makes sense for me.

    #+BEGIN_SRC emacs-lisp
      (use-package smooth-scrolling
        :ensure t
        :config
        (require 'smooth-scrolling))
    #+END_SRC

*** guru
    Want to make sure I never hit those evil keys

    #+BEGIN_SRC emacs-lisp
      (use-package guru-mode
        :ensure t
        :config
        (guru-global-mode t)
      )
    #+END_SRC

*** nyan
    Love them kitty down there. Also this keeps things in perspective to have fun.

    #+BEGIN_SRC emacs-lisp
      (use-package nyan-mode
        :ensure t
        :config
        (nyan-mode t))
    #+END_SRC

*** org
    org-mode my buddy. This is filed under external modes since I download a new copy of org mode to be updated.

    Some basic setup which I use =org-drill= and =org-journal=

    Here is a reference to the  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html][date time format]].

    #+BEGIN_SRC emacs-lisp
      (use-package org
        :bind (("C-c l" . org-store-link)
               ("C-c a" . org-agenda))
        :config
        ;; Config
        (setq org-log-done 'time)

        ;; Setup
        (add-to-list 'org-modules 'org-drill)

        ;; Todo
        (setq org-todo-keywords
              '((sequence "INVESTIGATE(i)" "TODO(t)" "PENDING(p)" "|" "DONE(d)" "CANCELLED(c)")))

        ;; Capture
        (setq org-directory
              (expand-file-name "~/Fakespace/nobody-library"))
        (setq org-default-notes-file (concat org-directory "/capture.org")) ;; Personal org library

        (setq org-main-file (expand-file-name "main.org" org-directory))
        (setq org-review-file (expand-file-name "learning.org" org-directory))
        (setq org-todo-file (expand-file-name "todo.org" org-directory))
        (setq org-blog-file (expand-file-name "fnlog.org" org-directory))

        (define-key global-map "\C-cc" 'org-capture)  ;; Use suggested key binding
        (setq org-capture-templates
              (list
               (list "t" "Todo" 'entry
                     (list 'file+headline org-todo-file "Todo")
                     "* INVESTIGATE %?\n   %i\n  %a")
               (list "r" "Review/Remember" 'entry
                     (list 'file+headline org-review-file "Learning Notes" "Review")
                     "* %? :drill:\n  CREATED_ON: %T")))

        ;; Agenda
        (setq org-agenda-span 14) ;; Fortnight

        (setq org-planning-files
              (list
               org-main-file
               org-blog-file
               ))

        (setq org-task-files
              (list
               org-todo-file
               org-review-file))

        (setq org-agenda-files
              (append
               org-planning-files
               org-task-files))

        (setq org-refile-targets nil) ;; TODO: Make refile tagets

        ;; org-drill
        (require 'org-drill)
        (setq org-drill-scope
              (list org-review-file))

        ;; org-journal
        (use-package org-journal
          :ensure t
          :bind (("C-c e" . org-journal-new-entry)) ;; C-c j conflicts with normal org-mode
          :config
          (setq org-journal-dir
                (expand-file-name "diary" org-directory))

          (setq org-journal-date-format "%Y-%b-%d %a") ;; YYYY-MMM-DD DAY
          (setq org-journal-time-format "%T ") ;; HH:MM:SS and the space is required

          (setq org-journal-file-format "%Y-%m-%d.journal.org.gpg") ;; Encryption via epa

          (defun fn/insert-private-file-headers ()
            (interactive)
            (add-file-local-variable-prop-line 'backup-inhibited t)
            (add-file-local-variable-prop-line 'auto-save-default nil))

          (defun fn/insert-org-gpg-headers ()
            (interactive)
            (add-file-local-variable-prop-line
             'epa-file-encrypt-to (list "fnmurillo@yandex.com"))
            (fn/insert-private-file-headers))

          (defun fn/insert-org-journal-headers ()
            (interactive)
            (fn/insert-org-gpg-headers)

            (end-of-visual-line)
            (newline-and-indent)

            (when (string-match "\\(20[0-9][0-9]\\)-\\([0-9][0-9]\\)-\\([0-9][0-9]\\)"
                                (buffer-name))
              (let ((year  (string-to-number (match-string 1 (buffer-name))))
                    (month (string-to-number (match-string 2 (buffer-name))))
                    (day   (string-to-number (match-string 3 (buffer-name))))
                    (datim nil))
                (setq datim (encode-time 0 0 0 day month year))

                (insert "#+STARTUP: content\n")
                (insert (format-time-string
                         "#+TITLE: Journal Entry - %Y-%b-%d %a\n" datim))
                (insert (format-time-string
                         "* %Y-%b-%d %a" datim)))))

          (auto-insert-mode t)
          (setq auto-insert-query t) ;; Don't ask, just put it in there
          (add-hook 'find-file-hook 'auto-insert)

          (add-to-list 'auto-insert-alist '(".*\.org\.gpg$" . fn/insert-org-gpg-headers))
          (add-to-list 'auto-insert-alist '(".*\.private.org" . fn/insert-private-file-headers))
          (add-to-list 'auto-insert-alist '(".*\.journal.org.gpg" . fn/insert-org-journal-headers)))

        (require 'org-mobile)
        (setq org-mobile-directory
              (expand-file-name "mobile" org-directory))
        (setq org-mobile-inbox-for-pull
              (expand-file-name "mobile-pull" org-directory))
        (setq org-mobile-files
              (list org-review-file)))

    #+END_SRC

*** projectile
    Must have a project finder when using a project.

    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :config
        (projectile-global-mode t)
        (setq projectile-indexing-method 'native)
        (add-to-list 'projectile-project-root-files "config.xml"))
    #+END_SRC

*** helm
    The revolutionary package to find

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :bind (("M-x" . helm-M-x)
               ("C-x C-f" . helm-find-files))
        :config
        (require 'helm-config)
        (setq helm-mode-fuzzy-match t)
        (setq helm-completion-in-region-fuzzy-match t)
        (helm-mode t))

      (use-package helm-projectile
        :ensure t
        :config
        (setq projectile-completion-system 'helm)
        (helm-projectile-on))

      (use-package helm-swoop
        :ensure t
        :bind (("M-i" . helm-swoop)
               ("C-c M-i" . helm-multi-swoop))
        :config
        (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
        (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
        (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
        (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line))
    #+END_SRC

*** magit
    Enough said, [[https://github.com/magit/magit][magit]] is the best git client you can get anywhere.

    There is a sad version requirement for 24.4 to use the latest code.

    #+BEGIN_SRC emacs-lisp
      (when (or (> emacs-major-version 24)
              (and (= emacs-major-version 24)
                   (>= emacs-minor-version 4)))
          (use-package magit
            :ensure t
            :defer t
            ))
    #+END_SRC

*** autocomplete
    Autocomplete is a must have feature

    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete
        :ensure t
        :config
        (require 'auto-complete-config)
        (ac-config-default)
        (global-auto-complete-mode)
        (setq popup-use-optimized-column-computation nil)
        (ac-set-trigger-key "TAB")
        (ac-set-trigger-key "<tab>"))
    #+END_SRC

*** yasnippet
    Snippet system along with autocomplete is awesome

    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
      :ensure t
      :defer t)
    #+END_SRC

*** emmet
    I do a lot of HTML editing, YASnippet can do but emmet is better

    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        :defer t)
    #+END_SRC

*** flycheck
    Syntax checking is very important

    #+BEGIN_SRC emacs-lisp
        (use-package flycheck
          :ensure t
          :defer t)
    #+END_SRC
*** flyspell
    Having a good spell checker is a must. I use =flyspell= although I have read issues about it

    #+BEGIN_SRC emacs-lisp
      (use-package flyspell
        :ensure t
        :defer t
        :init
        (add-hook 'org-mode-hook 'flyspell-mode t))
    #+END_SRC

*** paredit
    A good program pairer

    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :ensure t
        :defer t)
    #+END_SRC

*** js2
    A great mode for progressive nodejs

    [[https://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/][Tutorial in js2]]

    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :mode (("\\.jsx\\'" . js2-jsx-mode)
               ("\\.js\\'" . js2-mode))
        :defer t
        :config
        (setq js2-highlight-level 3))

      (use-package ac-js2
        :ensure t
        :defer t
        :init
        (add-hook 'js2-mode-hook 'auto-complete-mode)
        (add-hook 'js2-mode-hook 'ac-js2-mode))

      (use-package js2-refactor
        :ensure t
        :defer t
        :init
        (add-hook 'js2-mode-hook 'js2-refactor-mode)
        (js2r-add-keybindings-with-prefix "C-c C-m"))

      (use-package tern
        :ensure t
        :defer t
        :init
        (add-hook 'js2-mode-hook 'tern-mode))

      (use-package tern-auto-complete
        :ensure t
        :defer t
        :init
        (add-hook 'js2-mode-hook (lambda ()
                                         (tern-ac-setup))))

      (use-package react-snippets
        :ensure t
        :defer t)
    #+END_SRC

*** sass
    I use [[http://sass-lang.com/][sass]] for my jekyll blog

    #+BEGIN_SRC emacs-lisp
      (use-package sass-mode
        :ensure t
        :defer t
        :config
        ((add-to-list 'auto-mode-alist '("\\.sass\\'" . sass-mode))))
    #+END_SRC

*** cedet
    A must to use other libraries.

    This is an hard external dependency found in the =elisp/cedet= folder

    #+BEGIN_SRC emacs-lisp
      (use-package cedet
        :load-path "elisp/cedet/lisp"
        :defer t)
    #+END_SRC

*** auto-complile
    A good mode when editing lisp files

    #+BEGIN_SRC emacs-lisp
      (use-package auto-compile
        :ensure t
        :defer t
        :config
        (auto-compile-on-load-mode)
        (auto-compile-on-save-mode))
    #+END_SRC

** Programming Modes
   Modes for my programming experience.

*** python
    I love me Python, it pushed me to languages after learning this. Curse you Java for being strict.

    I use =pymacs= and =ropemacs=.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path
                   (expand-file-name "elisp/pymacs" user-emacs-directory))

      (use-package python
        :defer t
        :ensure t)


    #+END_SRC

** Utility Modes
*** twittering
    Integrating with emacs is very fun via [[https://github.com/hayamiz/twittering-mode][twittering]]

    #+BEGIN_SRC emacs-lisp
      (use-package twittering-mode
        :ensure t
        :defer t
        :init
        (setq twittering-auth-method 'oauth)
        (setq twittering-use-master-password t)
        :config
        (twittering-icon-mode t)
        (setq twittering-convert-fix-size 24))
    #+END_SRC
*** gnus
    The builtin =gnus= is useful in getting my mail

    #+BEGIN_SRC emacs-lisp
      (setq mail-authentication-file (expand-file-name ".authinfo.gpg"))

      (setq gnus-select-method
            '(nnimap "imap.gmail.com"
                     (nnimap-stream ssl)
                     (nnimap-authinfo-file mail-authentication-file)))

      (setq gnus-secondary-select-methods
            '((nnimap "imap.yandex.com"
                      (nnimap-stream ssl)
                      (nnimap-authinfo-file mail-authentication-file))))
    #+END_SRC

*** bbdb
    People organization

    #+BEGIN_SRC emacs-lisp
      (use-package bbdb
        :ensure t
        :defer t
        :config
        (bbdb-initialize)
        (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
    #+END_SRC

*** malabar
    Programming in =maven= is a thing, so I need [[https://github.com/m0smith/malabar-mode][malabar-mode]]

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package malabar-mode
        :ensure t
        :defer t)
    #+END_SRC
*
Scripts
* Scripts
** starup and shutdown hook
   Small script to update my org files

   #+BEGIN_SRC emacs-lisp
     (defun fn/startup ()
       (interactive)
       (shell-command "cd ~/Fakespace/nobody-library && git pull origin master"))

     (defun fn/cleanup ()
       (interactive)
       (shell-command "cd ~/Fakespace/nobody-library\
      && git add diary/*\
      && git commit -a -m \"Home Update\"\
      && git push origin master"))
   #+END_SRC

** projectile-init script
   This script runs .projectile-hook.el in each project root to ease development

   #+BEGIN_SRC emacs-lisp
     (defun fn/load-projectile-hook ()
       (interactive)
       (mapcar (lambda (project)
        (setq fn/current-project (expand-file-name project))
        (load
         (expand-file-name ".projectile-hook" fn/current-project)
         t))
 projectile-known-projects))
   #+END_SRC

** Open current buffer as root
   Taken from Mastering Emacs, this opens the current buffer as root via TRAMP

   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** Create media diary
   A personal script to bundle my journal, recordings and images into one org file. Not to be consumed by anyone else

   #+BEGIN_SRC emacs-lisp
     (defun fn/compile-media-diary ()
       (interactive)
       (setq md-root "/mnt/veracrypt2"
             md-file "media-diary.org"

             md-journal-dir-name "journal"
             md-audio-dir-name "audio"
             md-photo-dir-name "photo"

             md-journal-dir (expand-file-name md-journal-dir-name md-root)
             md-audio-dir (expand-file-name md-audio-dir-name md-root)
             md-photodir (expand-file-name md-photo-dir-name md-root)

             md-title "Media Diary"
             md-note-title "Notes"
             md-journal-title "Journal"
             md-media-title "Media"

             md-note-text "Something profound happened to me but I forgot")

       (defun directory-files-by-extension (directory extension)
         (directory-files directory nil
                          (format-message "\\.%s$" extension)))

       (defun parse-date-from-filename (file)
         (setq filename
               (file-name-nondirectory file))
         (parse-time-string filename))

       (defun insert-org-header (header)
         (org-insert-heading t)
         (insert header))

       (defun insert-org-subheader (subheader)
         (org-insert-subheading t)
         (insert subheader))

       (defun render-note-section ()
         (insert-org-subheader md-note-title)
         (newline-and-indent)
         (insert md-note-text))

       (defun render-journal-section ()
         (insert-org-header md-journal-title)
         (setq journal-files
               (directory-files-by-extension md-journal-dir "org")))


       (defun render-media-section ()
         (insert-org-header md-media-title))

       (find-file
        (expand-file-name md-file md-root))

       (insert-org-header md-title)

       (render-note-section)

       (render-journal-section)

       (render-media-section))
   #+END_SRC

* Reference
  - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]: I took her configuration as a base to make this org configuration
