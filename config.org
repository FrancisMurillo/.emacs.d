#+TITLE: Francis Murillo's Emacs configuration
#+OPTIONS: toc:4 h:4

* Introduction
** If I Forget
   No words can describe my awe with Emacs and continue to do so. A text editor with a lisp interpreter, it's concept is so simple and sublime. What joy.

   I remember starting Emacs seriously at around August of 2015. Before then, I picked it up lightly and thought(not use) about it; but what really drove me to use it is.
   - Growth :: I was using an IDE before and somebody told me that GUIs change but the shell remains the same. I found myself over time exploring keyboard shortcuts, better terminals and Emacs(or maybe vi).
   - Lightweight :: I had a crappy laptop that always needed to be plugged, had a lot dead pixels, and closes when it overheats; I needed something that would work with what I had.
   - Linux :: Moving from Windows to Linux forced me to reevaluate the software I used. Adopting a new philosophy and OS pushed me in the right direction

   Whatever the reason might have been. I just want to say I'm a happy Emacs user and I find comfort and joy in hearing other people talk and share about it.
** About My Configuration
   I use org-babel as my configuration file once I heard you can do so. Splitting the configuration to multiple files was the plan but the way it weaves nicely to documentation immediately drew me in.

   You can load this with =(org-babel-load-file "/path/to/file")= if you need to reload any changes.

   This is my =init.el= to allow org-babel to read from it. My only problem is having the static org-mode in the elisp folder, you have to copy the elisp folder as well to make the configuration work as is.

   #+BEGIN_SRC emacs-lisp :tangle no
     ; This sets up the load path so that we can override it
     (package-initialize nil)

     ;; Override the packages with the git version of Org and other packages

     ;; Static org-mode
     (add-to-list 'load-path
     (expand-file-name "elisp/org-mode/lisp" user-emacs-directory))
     (add-to-list 'load-path
     (expand-file-name "elisp/org-mode/contrib/lisp" user-emacs-directory))

     ;; Load the rest of the packages
     (package-initialize nil)

     ;; FIXME: Can loading org not be hard coded?
     (load-library "org")

     (setq package-enable-at-startup nil)
     (org-babel-load-file
     (expand-file-name "config.org" user-emacs-directory))
   #+END_SRC

   Or with an function instead
   #+BEGIN_SRC emacs-lisp
     (defun fn/reload-config ()
     (interactive)
     (org-babel-load-file
      (expand-file-name "config.org" user-emacs-directory)))
   #+END_SRC

   Also the code formatting needs to be uniform within the code blocks
   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

* Configuration
** Personal Options
   Just some things that relate to me

   #+BEGIN_SRC emacs-lisp
     (setq
      user-full-name "Francis Murillo"
      user-mail-address "francisavmurillo@gmail.com")
   #+END_SRC

   And load some secret configuration

   #+BEGIN_SRC emacs-lisp
     (load "secret" t)
   #+END_SRC

** Package Sources
   Add package sources if not present and reload, this should have been added in the =init.el= but checked here again for completion.

   #+BEGIN_SRC emacs-lisp
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
       ;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
       (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/")))
   #+END_SRC

** Prepare Bootstrap
   Initialize everything needed to configure the rest. The two major packages =use-package= and =org= have been loaded in the =init.el= file; here are the extra bootstrapping option

   Auto-compile is said to increase performance, but it is optional in my config

   #+BEGIN_SRC emacs-lisp
     (require 'use-package)
     (setq use-package-verbose t)

     (use-package auto-compile
         :ensure t
         :config
         (auto-compile-on-load-mode)
         (auto-compile-on-save-mode)
         (setq load-prefer-newer t))
   #+END_SRC

** General Configuration
*** Startup
    Startup options to stop annoying you

    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-screen t)
      (setq initial-scratch-message nil)
    #+END_SRC
*** Environment
    Some environment configuration

    #+BEGIN_SRC emacs-lisp
      (set-language-environment "UTF-8")
    #+END_SRC

    How about changing some options

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Backups
    Backups are good, just annoying when things are good

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC

   Version control is good, like wise.

   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions -1)
     (setq version-conrol t)
     (setq backup-by-copying t)
     (setq vc-make-backup-files t)
     ;; FIXME: Hard coded path?
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+END_SRC

*** History
    Save minibuffer history

    #+BEGIN_SRC emacs-lisp
      (savehist-mode 1)

      (setq savehist-file (expand-file-name "savehist" user-emacs-directory))
      (setq history-length t)
      (setq history-delete-duplicates t)
      (setq savehist-save-minibuffer-history 1)
      (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
    #+END_SRC

*** Window
    Window/Frame configuration. I prefer no clutter in my screen so I disable majority of the niceties.

    #+BEGIN_SRC emacs-lisp
      (tooltip-mode -1)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
    #+END_SRC
*** Buffer
    Some buffer configurations

    #+BEGIN_SRC emacs-lisp
      (global-whitespace-mode t)
      (global-auto-revert-mode t)
    #+END_SRC

*** Font
    I like fixed font specially DejaVu Mono

    #+BEGIN_SRC emacs-lisp
      (set-frame-font "DejaVu Sans Mono-6" t t)
    #+END_SRC

*** Theme
    Emacs theme for me. I prefer the default tsdh-dark

    #+BEGIN_SRC emacs-lisp
      (load-theme 'tsdh-light)
    #+END_SRC

*** Programming
    Some programming configuration that make sense

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "RET") 'newline-and-indent)
    #+END_SRC

** Builtin Modes
*** winner
    You got to have those window configuration

    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :ensure t
        :config
        (winner-mode t))
    #+END_SRC

*** ido
    =ido= has been kind to me since I started learning Emacs but learning =helm= might be better in the long term

    #+Begin_SRC emacs-lisp
      (use-package ido
        :disabled t
        :defer t
        :ensure t
        :config
        (ido-mode t)
        (ido-everywhere t)
        (setq ido-enable-flex-matching 1)
        (setq ido-show-dot-for-dired 1)

        ;; vertical ido display is better, like my taskbar
        (use-package ido-vertical-mode
              :ensure t
              :defer t
              :config
              (ido-vertical-mode t)
              (setq ido-vertical-show-count t))

        ;; flex matching is a must
        (use-package flx-ido
              :ensure t
              :defer t
              :config
              (flx-ido-mode t)
              (setq ido-enable-flex-matching t)
              (setq ido-use-faces nil))

        ;; smex is a great addition as well
        (use-package smex
          :ensure t
          :defer t
          :bind (("M-x" . smex)
    	     ("C-c C-c M-x" . execute-extended-command))
          :config
          (smex-initialize))
        )
    #+END_SRC
    
** External Modes
*** guru
    Want to make sure I never hit those evil keys

    #+BEGIN_SRC emacs-lisp
      (use-package guru-mode
        :ensure t
        :config
        (guru-global-mode t)
      )
    #+END_SRC

*** nyan
    Love them kitty down there. Also this keeps things in perspective to have fun.

    #+BEGIN_SRC emacs-lisp
      (use-package nyan-mode
        :ensure t
        :config
        (nyan-mode t))
    #+END_SRC

*** org
    org-mode my buddy. Since this is part of the bootstrapping, the main configuration is in the =init.el= file. Here are the extra configuration that I need for it to work better.

    However for dependencies on org-mode, I have to specify the load-path to avoid fetching a different copy of org.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-modules 'org-drill)
    #+END_SRC

*** projectile
    Must have a project finder when using a project.

    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :config
        (projectile-global-mode t)
        (setq projectile-indexing-method 'native)
        )
    #+END_SRC

*** helm
    The revolutionary package to find

    #+BEGIN_SRC emacs-lisp
                (use-package async
      :ensure t)

                (use-package helm
      :ensure t
      :bind (
                 ("M-x" . helm-M-x))
      :config
      (require 'helm-config)
      (setq helm-mode-fuzzy-match t)
      (setq helm-completion-in-region-fuzzy-match t)
      (helm-mode t))

      (use-package helm-projectile
      :ensure t
      :config
      (setq projectile-completion-system 'helm)
      (helm-projectile-on))
    #+END_SRC

*** autocomplete
    Autocomplete is a must have feature

    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete
    	:ensure t
    	:config
    	(require 'auto-complete-config)
    	(ac-config-default)
    	(setq popup-use-optimized-column-computation nil))
    #+END_SRC

*** yasnippet
    Snippet system along with autocomplete is awesome

    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
      :ensure t
      :defer t)
    #+END_SRC

*** emmet
    I do a lot of HTML editing, YASnippet can do but emmet is better

    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        :defer t)
    #+END_SRC

*** flycheck
    Syntax checking is very important

    #+BEGIN_SRC emacs-lisp
        (use-package flycheck
          :ensure t
          :defer t)
    #+END_SRC
*** js3
    A great mode for progressive nodejs

    #+BEGIN_SRC emacs-lisp
      (use-package js3-mode
        :ensure t
        :defer t)
    #+END_SRC
* Scripts
** projectile-init script
   This script runs .projectile-hook.el in each project root to ease development

   #+BEGIN_SRC emacs-lisp
     (defun fn/load-projectile-hook ()
       (interactive)
       (mapcar (lambda (project)
        (setq fn/current-project (expand-file-name project))
        (load
         (expand-file-name ".projectile-hook" fn/current-project)
         t))
   	 projectile-known-projects))
   #+END_SRC
   
* Reference
  - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]: I took her configuration as a base to make this org configuration
